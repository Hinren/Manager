<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:ExtendedControls.Converters"
    xmlns:local="clr-namespace:ExtendedControls"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">

    <converters:CornerRadiusSideConverter x:Key="CornerRadiusSideConverter"/>

    <RelativeSource x:Key="RelativeSelfExpander" AncestorType="{x:Type local:ExtExpander}"/>
    
    <!-- FOCUS VISUAL. -->
    
    <Style x:Key="ExtExpander.HeaderFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle
                            Margin="0"
                            SnapsToDevicePixels="true"
                            Stroke="Black"
                            StrokeDashArray="1 2"
                            StrokeThickness="1"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RIGHT HEADER STYLE. -->

    <Style x:Key="ExtExpander.RightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding CornerRadius, RelativeSource={StaticResource RelativeSelfExpander}}"
                        Padding="{TemplateBinding Padding}">
                        <Grid
                            Background="Transparent"
                            SnapsToDevicePixels="False">

                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <materialDesign:PackIcon
                                x:Name="icon"
                                Foreground="{Binding ArrowBrush, RelativeSource={StaticResource RelativeSelfExpander}}"
                                Height="{Binding ArrowHeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                HorizontalAlignment="Stretch"
                                Kind="ChevronRightCircle"
                                Margin="{Binding ArrowMargin, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MaxHeight="{Binding ArrowMaxHeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MaxWidth="{Binding ArrowMaxWidth, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MinHeight="{Binding ArrowMinHeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MinWidth="{Binding ArrowMinWidth, RelativeSource={StaticResource RelativeSelfExpander}}"
                                SnapsToDevicePixels="false"
                                VerticalAlignment="Stretch"
                                Width="{Binding ArrowWidth, RelativeSource={StaticResource RelativeSelfExpander}}"/>

                            <ContentPresenter
                                HorizontalAlignment="Center"
                                Margin="0,4,0,0"
                                Grid.Row="1"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="True"
                                TextBlock.Foreground="{Binding HeaderForegroundBrush, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontFamily="{Binding HeaderFontFamily, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontSize="{Binding HeaderFontSize, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontStretch="{Binding HeaderFontStretch, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontStyle="{Binding HeaderFontStyle, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontWeight="{Binding HeaderFontWeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- Is Checked. -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" TargetName="border" Value="{Binding CornerRadius, Mode=OneWay, RelativeSource={StaticResource RelativeSelfExpander}, Converter={StaticResource CornerRadiusSideConverter}, ConverterParameter={x:Static converters:CornerRadiusSideConverter.LeftSide}}"/>
                            <Setter Property="Kind" TargetName="icon" Value="ChevronLeftCircle"/>
                        </Trigger>

                        <!-- Is Mouse Over. -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowMouseOverBrush, RelativeSource={StaticResource RelativeSelfExpander}}"/>
                        </Trigger>

                        <!-- Is Pressed. -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowPressedBrush, RelativeSource={StaticResource RelativeSelfExpander}}"/>
                        </Trigger>

                        <!-- Is Enabled. -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="icon" Value="0.56"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- UP HEADER STYLE. -->
    <Style x:Key="ExtExpander.UpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding CornerRadius, RelativeSource={StaticResource RelativeSelfExpander}}"
                        Padding="{TemplateBinding Padding}">
                        <Grid
                            Background="Transparent"
                            SnapsToDevicePixels="False">

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <materialDesign:PackIcon
                                x:Name="icon"
                                Foreground="{Binding ArrowBrush, RelativeSource={StaticResource RelativeSelfExpander}}"
                                Height="{Binding ArrowHeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                HorizontalAlignment="Stretch"
                                Kind="ChevronUpCircle"
                                Margin="{Binding ArrowMargin, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MaxHeight="{Binding ArrowMaxHeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MaxWidth="{Binding ArrowMaxWidth, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MinHeight="{Binding ArrowMinHeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MinWidth="{Binding ArrowMinWidth, RelativeSource={StaticResource RelativeSelfExpander}}"
                                SnapsToDevicePixels="false"
                                VerticalAlignment="Stretch"
                                Width="{Binding ArrowWidth, RelativeSource={StaticResource RelativeSelfExpander}}"/>

                            <ContentPresenter
                                Grid.Column="1"
                                HorizontalAlignment="Left"
                                Margin="4,0,0,0"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="True"
                                TextBlock.Foreground="{Binding HeaderForegroundBrush, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontFamily="{Binding HeaderFontFamily, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontSize="{Binding HeaderFontSize, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontStretch="{Binding HeaderFontStretch, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontStyle="{Binding HeaderFontStyle, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontWeight="{Binding HeaderFontWeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                VerticalAlignment="Center"/>

                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- Is Checked. -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" TargetName="border" Value="{Binding CornerRadius, Mode=OneWay, RelativeSource={StaticResource RelativeSelfExpander}, Converter={StaticResource CornerRadiusSideConverter}, ConverterParameter={x:Static converters:CornerRadiusSideConverter.BottomSide}}"/>
                            <Setter Property="Kind" TargetName="icon" Value="ChevronDownCircle"/>
                        </Trigger>

                        <!-- Is Mouse Over. -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowMouseOverBrush, RelativeSource={StaticResource RelativeSelfExpander}}"/>
                        </Trigger>

                        <!-- Is Pressed. -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowPressedBrush, RelativeSource={StaticResource RelativeSelfExpander}}"/>
                        </Trigger>

                        <!-- Is Enabled. -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="icon" Value="0.56"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- LEFT HEADER STYLE. -->
    <Style x:Key="ExtExpander.LeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding CornerRadius, RelativeSource={StaticResource RelativeSelfExpander}}"
                        Padding="{TemplateBinding Padding}">
                        <Grid
                            Background="Transparent"
                            SnapsToDevicePixels="False">

                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <materialDesign:PackIcon
                                x:Name="icon"
                                Foreground="{Binding ArrowBrush, RelativeSource={StaticResource RelativeSelfExpander}}"
                                Height="{Binding ArrowHeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                HorizontalAlignment="Stretch"
                                Kind="ChevronLeftCircle"
                                Margin="{Binding ArrowMargin, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MaxHeight="{Binding ArrowMaxHeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MaxWidth="{Binding ArrowMaxWidth, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MinHeight="{Binding ArrowMinHeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MinWidth="{Binding ArrowMinWidth, RelativeSource={StaticResource RelativeSelfExpander}}"
                                SnapsToDevicePixels="false"
                                VerticalAlignment="Stretch"
                                Width="{Binding ArrowWidth, RelativeSource={StaticResource RelativeSelfExpander}}"/>

                            <ContentPresenter
                                HorizontalAlignment="Center"
                                Margin="0,4,0,0"
                                Grid.Row="1"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="True"
                                TextBlock.Foreground="{Binding HeaderForegroundBrush, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontFamily="{Binding HeaderFontFamily, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontSize="{Binding HeaderFontSize, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontStretch="{Binding HeaderFontStretch, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontStyle="{Binding HeaderFontStyle, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontWeight="{Binding HeaderFontWeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                VerticalAlignment="Top"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- Is Checked. -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" TargetName="border" Value="{Binding CornerRadius, Mode=OneWay, RelativeSource={StaticResource RelativeSelfExpander}, Converter={StaticResource CornerRadiusSideConverter}, ConverterParameter={x:Static converters:CornerRadiusSideConverter.RightSide}}"/>
                            <Setter Property="Kind" TargetName="icon" Value="ChevronRightCircle"/>
                        </Trigger>

                        <!-- Is Mouse Over. -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowMouseOverBrush, RelativeSource={StaticResource RelativeSelfExpander}}"/>
                        </Trigger>

                        <!-- Is Pressed. -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowPressedBrush, RelativeSource={StaticResource RelativeSelfExpander}}"/>
                        </Trigger>

                        <!-- Is Enabled. -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="icon" Value="0.56"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DOWN HEADER STYLE. -->
    <Style x:Key="ExtExpander.DownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding CornerRadius, RelativeSource={StaticResource RelativeSelfExpander}}"
                        Padding="{TemplateBinding Padding}">
                        <Grid
                            Background="Transparent"
                            SnapsToDevicePixels="False">

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <materialDesign:PackIcon
                                x:Name="icon"
                                Foreground="{Binding ArrowBrush, RelativeSource={StaticResource RelativeSelfExpander}}"
                                Height="{Binding ArrowHeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                HorizontalAlignment="Stretch"
                                Kind="ChevronDownCircle"
                                Margin="{Binding ArrowMargin, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MaxHeight="{Binding ArrowMaxHeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MaxWidth="{Binding ArrowMaxWidth, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MinHeight="{Binding ArrowMinHeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                MinWidth="{Binding ArrowMinWidth, RelativeSource={StaticResource RelativeSelfExpander}}"
                                SnapsToDevicePixels="false"
                                VerticalAlignment="Stretch"
                                Width="{Binding ArrowWidth, RelativeSource={StaticResource RelativeSelfExpander}}"/>

                            <ContentPresenter
                                Grid.Column="1"
                                HorizontalAlignment="Left"
                                Margin="4,0,0,0"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="True"
                                TextBlock.Foreground="{Binding HeaderForegroundBrush, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontFamily="{Binding HeaderFontFamily, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontSize="{Binding HeaderFontSize, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontStretch="{Binding HeaderFontStretch, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontStyle="{Binding HeaderFontStyle, RelativeSource={StaticResource RelativeSelfExpander}}"
                                TextBlock.FontWeight="{Binding HeaderFontWeight, RelativeSource={StaticResource RelativeSelfExpander}}"
                                VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>

                        <!-- Is Checked. -->
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="CornerRadius" TargetName="border" Value="{Binding CornerRadius, Mode=OneWay, RelativeSource={StaticResource RelativeSelfExpander}, Converter={StaticResource CornerRadiusSideConverter}, ConverterParameter={x:Static converters:CornerRadiusSideConverter.TopSide}}"/>
                            <Setter Property="Kind" TargetName="icon" Value="ChevronUpCircle"/>
                        </Trigger>

                        <!-- Is Mouse Over. -->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowMouseOverBrush, RelativeSource={StaticResource RelativeSelfExpander}}"/>
                        </Trigger>

                        <!-- Is Pressed. -->
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Foreground" TargetName="icon" Value="{Binding ArrowPressedBrush, RelativeSource={StaticResource RelativeSelfExpander}}"/>
                        </Trigger>

                        <!-- Is Enabled. -->
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="icon" Value="0.56"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- EXPANDER CONTROL TEMPLATE. -->
    <ControlTemplate x:Key="ExtExpander.ControlTemplate" TargetType="{x:Type local:ExtExpander}">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding CornerRadius}"
            SnapsToDevicePixels="true">

            <DockPanel>
                <ToggleButton
                    x:Name="HeaderSite"
                    Background="{TemplateBinding HeaderBackgroundBrush}"
                    BorderBrush="{TemplateBinding HeaderBorderBrush}"
                    BorderThickness="{TemplateBinding HeaderBorderThickness}"
                    ContentTemplate="{TemplateBinding HeaderTemplate}"
                    ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                    Content="{TemplateBinding Header}"
                    DockPanel.Dock="Top"
                    Foreground="{TemplateBinding HeaderForegroundBrush}"
                    FocusVisualStyle="{StaticResource ExtExpander.HeaderFocusVisual}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                    MinWidth="0"
                    MinHeight="0"
                    Padding="{TemplateBinding HeaderPadding}"
                    Style="{StaticResource ExtExpander.DownHeaderStyle}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>

                <ContentPresenter
                    x:Name="ExpandSite"
                    DockPanel.Dock="Bottom"
                    Focusable="false"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    Margin="{TemplateBinding Padding}"
                    Visibility="Collapsed"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>

            <!-- Is Expanded. -->
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
            </Trigger>

            <!-- Direction Left. -->
            <Trigger Property="ExpandDirection" Value="Left">
                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExtExpander.LeftHeaderStyle}"/>
            </Trigger>

            <!-- Direction Up. -->
            <Trigger Property="ExpandDirection" Value="Up">
                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExtExpander.UpHeaderStyle}"/>
            </Trigger>

            <!-- Direction Right. -->
            <Trigger Property="ExpandDirection" Value="Right">
                <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExtExpander.RightHeaderStyle}"/>
            </Trigger>

            <!-- Is Disabled. -->
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.56"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- EXPANDER STYLE. -->
    <Style x:Key="ExtExpanderStyle" TargetType="{x:Type local:ExtExpander}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template" Value="{StaticResource ExtExpander.ControlTemplate}"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    </Style>

</ResourceDictionary>